package com.softsalud.software.view;

import com.softsalud.software.controller.logic.VacunacionController;
import com.softsalud.software.persistence.model.Vacunacion;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author Ismael
 */
public class JDialogVacunacion extends javax.swing.JDialog {

    private final VacunacionController controller;
    public JComboBox<Integer> paginaComboBox;
    private final int EMPTY = -1, EXITO = 1, CLAVEREPETIDA = 2, UNKNOWNFAIL = 3, NOEXISTEPERSONA = 4, NOEXISTEVACUNA = 5;
    private final int DATETOSTRING = 4, STRINGTODATE = 5;
    private Long dniBuscado;
    private String marcaVacuna, loteVacuna;

    /**
     * Creates new form JDialogVacunacion
     *
     * @param parent
     * @param modal
     * @param controller
     */
    public JDialogVacunacion(java.awt.Frame parent, boolean modal, VacunacionController controller) {
        super(parent, modal);
        initComponents();
        this.controller = controller;
        this.controller.setVentanaVacunacion(this);
        this.controller.ListarVacunacion(TableVacunacion, jPanelBotonesPagina);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jlTittle1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableVacunacion = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        btnReloader = new javax.swing.JButton();
        jPanelBotonesPagina = new javax.swing.JPanel();
        btnEdit = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jlTittle = new javax.swing.JLabel();
        jlDni = new javax.swing.JLabel();
        jtfDNI = new javax.swing.JTextField();
        jlMarcaVacuna = new javax.swing.JLabel();
        jtfMarcaVacuna = new javax.swing.JTextField();
        jlLoteVacuna = new javax.swing.JLabel();
        jtfLoteVacuna = new javax.swing.JTextField();
        jlFechaVac = new javax.swing.JLabel();
        jlNumeroDosis = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jlLugarVacunacion = new javax.swing.JLabel();
        jlErrorRiskFactor = new javax.swing.JLabel();
        jtfFechaVac = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        jcbNumeroDosis = new javax.swing.JComboBox<>();
        jcbFechaActual = new javax.swing.JCheckBox();
        jlFechaVac2 = new javax.swing.JLabel();
        jcbLugarVacunacion = new javax.swing.JComboBox<>();
        jlErrorDNI = new javax.swing.JLabel();
        jlErrorMarcaVacuna = new javax.swing.JLabel();
        jlErrorLoteVacuna = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jtfSearchName = new javax.swing.JTextField();
        btnSearchName = new javax.swing.JButton();
        btnSearchDNI = new javax.swing.JButton();
        jtfSearchDni = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel3.setBackground(new java.awt.Color(220, 255, 220));

        jlTittle1.setFont(new java.awt.Font("Constantia", 1, 14)); // NOI18N
        jlTittle1.setForeground(new java.awt.Color(0, 0, 0));
        jlTittle1.setText("LISTADO DE PERSONAS : ");

        TableVacunacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DNI", "Nombre Completo", "Marca Vacuna", "Lote Vacuna", "Dosis", "Fecha", "Lugar"
            }
        ));
        jScrollPane1.setViewportView(TableVacunacion);
        if (TableVacunacion.getColumnModel().getColumnCount() > 0) {
            TableVacunacion.getColumnModel().getColumn(0).setResizable(false);
            TableVacunacion.getColumnModel().getColumn(0).setPreferredWidth(45);
            TableVacunacion.getColumnModel().getColumn(1).setResizable(false);
            TableVacunacion.getColumnModel().getColumn(1).setPreferredWidth(135);
            TableVacunacion.getColumnModel().getColumn(2).setResizable(false);
            TableVacunacion.getColumnModel().getColumn(2).setPreferredWidth(60);
            TableVacunacion.getColumnModel().getColumn(3).setResizable(false);
            TableVacunacion.getColumnModel().getColumn(3).setPreferredWidth(45);
            TableVacunacion.getColumnModel().getColumn(4).setResizable(false);
            TableVacunacion.getColumnModel().getColumn(4).setPreferredWidth(20);
            TableVacunacion.getColumnModel().getColumn(5).setResizable(false);
            TableVacunacion.getColumnModel().getColumn(5).setPreferredWidth(40);
            TableVacunacion.getColumnModel().getColumn(6).setResizable(false);
            TableVacunacion.getColumnModel().getColumn(6).setPreferredWidth(75);
        }

        btnDelete.setText("Eliminar");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnReloader.setText("Recargar Página");
        btnReloader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloaderActionPerformed(evt);
            }
        });

        jPanelBotonesPagina.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnEdit.setText("Editar");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jlTittle1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanelBotonesPagina, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 684, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnReloader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlTittle1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelBotonesPagina, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnReloader)
                    .addComponent(btnEdit))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(220, 220, 250));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jlTittle.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jlTittle.setForeground(new java.awt.Color(0, 0, 0));
        jlTittle.setText("DATOS DE LA VACUNACIÓN:");

        jlDni.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jlDni.setForeground(new java.awt.Color(0, 0, 0));
        jlDni.setText("DNI : ");

        jtfDNI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfDNIKeyTyped(evt);
            }
        });

        jlMarcaVacuna.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jlMarcaVacuna.setForeground(new java.awt.Color(0, 0, 0));
        jlMarcaVacuna.setText("Marca Vacuna : ");

        jlLoteVacuna.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jlLoteVacuna.setForeground(new java.awt.Color(0, 0, 0));
        jlLoteVacuna.setText("Lote Vacuna : ");

        jlFechaVac.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jlFechaVac.setForeground(new java.awt.Color(0, 0, 0));
        jlFechaVac.setText("Fecha Vacunación : ");

        jlNumeroDosis.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jlNumeroDosis.setForeground(new java.awt.Color(0, 0, 0));
        jlNumeroDosis.setText("Número dosis : ");

        btnSave.setText("Agregar");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancelar");
        btnCancel.setEnabled(false);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jlLugarVacunacion.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jlLugarVacunacion.setForeground(new java.awt.Color(0, 0, 0));
        jlLugarVacunacion.setText("Lugar Vacunación : ");

        jlErrorRiskFactor.setForeground(new java.awt.Color(175, 0, 50));
        jlErrorRiskFactor.setText(" ");

        jtfFechaVac.setText("Formato: DD-MM-AAAA. Ej: 09-12-2018");
        jtfFechaVac.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtfFechaVacFocusGained(evt);
            }
        });
        jtfFechaVac.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfFechaVacKeyTyped(evt);
            }
        });

        btnUpdate.setText("Guardar Cambios");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jcbNumeroDosis.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Anual", "1", "2", "3", "4", "5", "6", "7", "8" }));

        jcbFechaActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbFechaActualActionPerformed(evt);
            }
        });

        jlFechaVac2.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jlFechaVac2.setForeground(new java.awt.Color(0, 0, 0));
        jlFechaVac2.setText("Activar Fecha Actual : ");

        jcbLugarVacunacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hospital Dr. José A.S", "CIC Hielos Continentales", "CIC Padre Mujica", "CIC Julia Defour", "Otro" }));

        jlErrorDNI.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jlErrorDNI.setForeground(new java.awt.Color(175, 0, 50));
        jlErrorDNI.setText(" ");

        jlErrorMarcaVacuna.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jlErrorMarcaVacuna.setForeground(new java.awt.Color(175, 0, 50));
        jlErrorMarcaVacuna.setText(" ");

        jlErrorLoteVacuna.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jlErrorLoteVacuna.setForeground(new java.awt.Color(175, 0, 50));
        jlErrorLoteVacuna.setText(" ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jlErrorRiskFactor))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jlTittle))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(jlErrorLoteVacuna, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jlLugarVacunacion)
                            .addComponent(jlFechaVac)
                            .addComponent(jlNumeroDosis)
                            .addComponent(jlLoteVacuna)
                            .addComponent(jlMarcaVacuna)
                            .addComponent(jlDni))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jlFechaVac2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcbFechaActual))
                            .addComponent(jtfLoteVacuna)
                            .addComponent(jtfFechaVac)
                            .addComponent(jtfMarcaVacuna)
                            .addComponent(jtfDNI)
                            .addComponent(jcbNumeroDosis, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcbLugarVacunacion, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlErrorDNI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlErrorMarcaVacuna, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jlTittle)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlDni, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtfDNI))
                .addGap(2, 2, 2)
                .addComponent(jlErrorDNI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlMarcaVacuna, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtfMarcaVacuna))
                .addGap(2, 2, 2)
                .addComponent(jlErrorMarcaVacuna)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlLoteVacuna, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtfLoteVacuna))
                .addGap(2, 2, 2)
                .addComponent(jlErrorLoteVacuna)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlNumeroDosis)
                    .addComponent(jcbNumeroDosis, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jlFechaVac)
                    .addComponent(jtfFechaVac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jcbFechaActual)
                    .addComponent(jlFechaVac2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jcbLugarVacunacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlLugarVacunacion))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnSave)
                    .addComponent(btnUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlErrorRiskFactor)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jcbNumeroDosis, jlNumeroDosis});

        jPanel2.setBackground(new java.awt.Color(255, 220, 220));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "BUSCAR PERSONAS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Roboto", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanel2.setForeground(new java.awt.Color(0, 0, 0));

        jtfSearchName.setEnabled(false);

        btnSearchName.setText("Por Nombre y Apellido : ");

        btnSearchDNI.setText("Por DNI : ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnSearchName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfSearchName, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnSearchDNI)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfSearchDni)))
                .addGap(126, 126, 126))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchDNI)
                    .addComponent(jtfSearchDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchName))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        Vacunacion v = controller.editarVacunacion(TableVacunacion);
        if (v != null) {
            controller.eliminarVacunacion(v);
            controller.ListarVacunacion(TableVacunacion, jPanelBotonesPagina);
            clearBtns();
            clearCells();
        } else {
            String mensaje = "Seleccione una celda para editar.";
            String titulo = "Atención";
            int tipoMensaje = JOptionPane.WARNING_MESSAGE;
            mostrarMensajeError(mensaje, titulo, tipoMensaje);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnReloaderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloaderActionPerformed
        controller.ListarVacunacion(TableVacunacion, jPanelBotonesPagina);
        clearBtns();
        clearCells();
    }//GEN-LAST:event_btnReloaderActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        Vacunacion v = controller.editarVacunacion(TableVacunacion);
        if (v != null) {
            dniBuscado = Long.valueOf(v.getPersona_dni().toString());
            marcaVacuna = v.getNombre_vacuna();
            loteVacuna = v.getLote_vacuna();
            jtfDNI.setText(v.getPersona_dni().toString());
            jtfMarcaVacuna.setText(v.getNombre_vacuna());
            jtfLoteVacuna.setText(v.getLote_vacuna());
            jcbNumeroDosis.setSelectedIndex(v.getNumero_dosis());
            jtfFechaVac.setText(formatearFecha(v.getFecha_vacunacion().toString(), DATETOSTRING));
            jcbLugarVacunacion.setSelectedItem(v.getLugar_vacunacion());
            btnCancel.setEnabled(true);
            btnUpdate.setEnabled(true);
            btnEdit.setEnabled(false);
            btnSave.setEnabled(false);
            btnDelete.setEnabled(false);
        } else {
            String mensaje = "Seleccione una celda para editar.";
            String titulo = "Atención";
            int tipoMensaje = JOptionPane.WARNING_MESSAGE;
            mostrarMensajeError(mensaje, titulo, tipoMensaje);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (estanCamposCompletosYValidos()) {
            int valorDosis = ("Anual".equals(jcbNumeroDosis.getSelectedItem().toString()))
                    ? 0 : Integer.parseInt(jcbNumeroDosis.getSelectedItem().toString());
            int resultado = controller.modificarVacunacion(dniBuscado,
                    marcaVacuna,
                    loteVacuna,
                    Long.valueOf(jtfDNI.getText()),
                    jtfMarcaVacuna.getText(),
                    jtfLoteVacuna.getText(),
                    valorDosis,
                    formatearFecha(jtfFechaVac.getText(), STRINGTODATE),
                    jcbLugarVacunacion.getSelectedItem().toString());
            switch (resultado) {
                case EXITO -> {
                    controller.ListarVacunacion(TableVacunacion, jPanelBotonesPagina);
                    dniBuscado = null;
                    marcaVacuna = null;
                    loteVacuna = null;
                    clearCells();
                    clearBtns();
                }
                case CLAVEREPETIDA -> {
                    jlErrorDNI.setText("Ingresar un número de DNI válido");
                    jlErrorMarcaVacuna.setText("Ingresar una marca válida");
                    jlErrorLoteVacuna.setText("Ingresar un lote válido");
                    jtfDNI.requestFocus();
                    mostrarMensajeError("Ya existe un registro con el dni, la marca y el lote ingresados.",
                            "Datos Repetidos",
                            JOptionPane.ERROR_MESSAGE);
                }
                case UNKNOWNFAIL ->
                    mostrarMensajeError("Error desconocido.",
                            "UNKNOWFAIL",
                            JOptionPane.ERROR_MESSAGE);
                default -> {
                }
            }
        } else {
            mostrarMensajeError("Exiten campos vacíos o inválidos. Revise e intente de nuevo.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void jtfFechaVacKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfFechaVacKeyTyped
        if (evt.getKeyChar() != 45) { // 45 es "-" en ascii
            validarNumero(evt);
        }
        validarLongitudCadena(evt, jtfFechaVac, 10);
    }//GEN-LAST:event_jtfFechaVacKeyTyped

    private void jtfFechaVacFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfFechaVacFocusGained
        if (jtfFechaVac.getText().equals("Formato: DD-MM-AAAA. Ej: 09-12-2018")) {
            jtfFechaVac.setText("");
        }
    }//GEN-LAST:event_jtfFechaVacFocusGained

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
//        dniBuscado = null;
        clearCells();
        clearBtns();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (estanCamposCompletosYValidos()) {
            int resultado = controller.agregarVacunacion(jtfDNI.getText(),
                    jtfMarcaVacuna.getText(),
                    jtfLoteVacuna.getText(),
                    jcbNumeroDosis.getSelectedItem().toString(),
                    formatearFecha(jtfFechaVac.getText(), STRINGTODATE),
                    jcbLugarVacunacion.getSelectedItem().toString());
            switch (resultado) {
                case EXITO -> {
                    controller.ListarVacunacion(TableVacunacion, jPanelBotonesPagina);
                    clearCells();
                }
                case CLAVEREPETIDA -> {
                    mostrarMensajeError("Ya existe un registro con el dni, la marca y el lote ingresados.",
                            "Datos Repetidos",
                            JOptionPane.ERROR_MESSAGE);
                }
                case NOEXISTEPERSONA -> {
                    mostrarMensajeError("No existe una persona con el DNI ingresado, verifique el dni o registrelo primero.",
                            "Problemas con DNI",
                            JOptionPane.ERROR_MESSAGE);
                    jlErrorDNI.setText("Ingrese un dni existente");
                    jtfDNI.requestFocus();
                }
                case NOEXISTEVACUNA -> {
                    mostrarMensajeError("No existe una vacuna con la marca ingresada, verifique o registrela primero.",
                            "Problemas con Marca",
                            JOptionPane.ERROR_MESSAGE);
                    jlErrorMarcaVacuna.setText("Ingrese una marca existente");
                    jtfMarcaVacuna.requestFocus();
                }
                default -> {
                    mostrarMensajeError("Revise atentamente el manual e intente de nuevo", "Error desconocido", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            mostrarMensajeError("Exiten campos vacíos o inválidos. Revise e intente de nuevo.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void jtfDNIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfDNIKeyTyped
        validarNumero(evt);
        validarLongitudCadena(evt, jtfDNI, 8);
    }//GEN-LAST:event_jtfDNIKeyTyped

    private void jcbFechaActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbFechaActualActionPerformed
        if (jcbFechaActual.isSelected()) {
            ingresarFechaActual();
            jtfFechaVac.enable(false);
        } else {
            jtfFechaVac.setText("Formato: DD-MM-AAAA. Ej: 09-12-2018");
            jtfFechaVac.enable(true);
        }
    }//GEN-LAST:event_jcbFechaActualActionPerformed

    private boolean estanCamposCompletosYValidos() {
        boolean camposValidos = true;
        clearLabelError();
        if (!jcbFechaActual.isSelected() && !esFechaValida() || jtfFechaVac.getText().equals("Formato: DD-MM-AAAA. Ej: 09-12-2018")) {
            jtfFechaVac.requestFocus();
            camposValidos = false;
        }
        if (jtfLoteVacuna.getText().isEmpty()) {
            jlErrorLoteVacuna.setText("Ingrese el lote de la vacuna");
            jtfLoteVacuna.requestFocus();
            camposValidos = false;
        }
        if (jtfMarcaVacuna.getText().isEmpty()) {
            jlErrorMarcaVacuna.setText("Ingrese la marca de la vacuna");
            jtfMarcaVacuna.requestFocus();
            camposValidos = false;
        }
        if (jtfDNI.getText().isEmpty()) {
            jlErrorDNI.setText("Ingresar un número de DNI válido");
            jtfDNI.requestFocus();
            camposValidos = false;
        }
        return camposValidos;
    }

    private void mostrarMensajeError(String mensaje, String titulo, int tipoMensaje) {
        JOptionPane.showMessageDialog(rootPane, mensaje, titulo, tipoMensaje);
    }

    private void validarNumero(java.awt.event.KeyEvent evt) {
        int ascii = evt.getKeyChar();
        if (!(ascii >= 48 && ascii <= 57)) {
            evt.consume();
        }
    }

    private void validarLongitudCadena(java.awt.event.KeyEvent evt, javax.swing.JTextField array, int max) {
        if (array.getText().length() >= max) {
            evt.consume();
        }
    }

    private boolean esFechaValida() {
        return (esEstructuraFechaValido() && esFormatoFechaValido()
                && esFechaMenorHoy() && esFechaMayor1900());
    }

    private boolean esEstructuraFechaValido() {
        String textoIngresado = jtfFechaVac.getText();
        return textoIngresado.matches("\\d{2}-\\d{2}-\\d{4}"); // Fecha en formato incorrecto
    }

    private boolean esFormatoFechaValido() {
        String[] partesFecha = jtfFechaVac.getText().split("-");
        int dia = Integer.parseInt(partesFecha[0]);
        int mes = Integer.parseInt(partesFecha[1]);
        int anio = Integer.parseInt(partesFecha[2]);

        // Verificar si la fecha es válida según el calendario gregoriano
        try {
            LocalDate fechaIngresada = LocalDate.of(anio, mes, dia);
            return true;
        } catch (DateTimeException e) {
            return false; // Fecha inválida
        }
    }

    private boolean esFechaMenorHoy() {
        String fechaFormateada = formatearFecha(jtfFechaVac.getText(), STRINGTODATE); // Convertir la fecha ingresada a un objeto LocalDate
        LocalDate fechaIngresada = LocalDate.parse(fechaFormateada);
        LocalDate fechaActual = LocalDate.now(); // Obtener la fecha actual
        return fechaIngresada.isBefore(fechaActual) || fechaIngresada.equals(fechaActual);
    }

    private boolean esFechaMayor1900() {
        String fechaFormateada = formatearFecha(jtfFechaVac.getText(), STRINGTODATE);
        LocalDate fechaIngresada = LocalDate.parse(fechaFormateada); // Convertir la fecha ingresada a un objeto LocalDate
        LocalDate fecha1900 = LocalDate.of(1900, 1, 1); // Crear una fecha para el año 1900
        return fechaIngresada.isAfter(fecha1900) || fechaIngresada.equals(fecha1900);
    }

    private String formatearFecha(String fechaOriginal, int modo) {
        DateTimeFormatter formatoString = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        DateTimeFormatter formatoDate = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        LocalDate nuevaFecha;
        try {
            switch (modo) {
                case STRINGTODATE -> {
                    nuevaFecha = LocalDate.parse(fechaOriginal, formatoString);
                    return nuevaFecha.format(formatoDate);
                }
                case DATETOSTRING -> {
                    nuevaFecha = LocalDate.parse(fechaOriginal, formatoDate);
                    return nuevaFecha.format(formatoString);
                }
                default -> {
                    return fechaOriginal;
                }
            }
        } catch (java.time.format.DateTimeParseException ex) {
            Logger.getLogger(JDialogPersona.class.getName()).log(Level.SEVERE, null, ex);
            return fechaOriginal;
        }
    }

    private void ingresarFechaActual() {
        LocalDate hoy = LocalDate.now();
        String fechaActual = formatearFecha(hoy.toString(), DATETOSTRING);
        jtfFechaVac.setText(fechaActual);
    }

    private void clearBtns() {
        btnCancel.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnEdit.setEnabled(true);
        btnSave.setEnabled(true);
        btnDelete.setEnabled(true);
    }

    private void clearCells() {
        jtfDNI.setText("");
        jtfMarcaVacuna.setText("");
        jtfLoteVacuna.setText("");
        jcbNumeroDosis.setSelectedIndex(0);
        clearLabelError();
        jtfFechaVac.setText("Formato: DD-MM-AAAA. Ej: 09-12-2018");
        jtfFechaVac.enable(true);
        jcbFechaActual.setSelected(false);
        jcbLugarVacunacion.setSelectedIndex(0);
    }

    private void clearLabelError() {
        jlErrorDNI.setText(" ");
        jlErrorMarcaVacuna.setText(" ");
        jlErrorLoteVacuna.setText(" ");
    }

    public JComboBox<Integer> getPaginaComboBox() {
        return paginaComboBox;
    }

    public void setPaginaComboBox(JComboBox<Integer> paginaComboBox) {
        this.paginaComboBox = paginaComboBox;
    }

    public JTable getTableVacunacion() {
        return TableVacunacion;
    }

    public void setTableVacunacion(JTable TableVacunacion) {
        this.TableVacunacion = TableVacunacion;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableVacunacion;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnReloader;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearchDNI;
    private javax.swing.JButton btnSearchName;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelBotonesPagina;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox jcbFechaActual;
    private javax.swing.JComboBox<String> jcbLugarVacunacion;
    private javax.swing.JComboBox<String> jcbNumeroDosis;
    private javax.swing.JLabel jlDni;
    private javax.swing.JLabel jlErrorDNI;
    private javax.swing.JLabel jlErrorLoteVacuna;
    private javax.swing.JLabel jlErrorMarcaVacuna;
    private javax.swing.JLabel jlErrorRiskFactor;
    private javax.swing.JLabel jlFechaVac;
    private javax.swing.JLabel jlFechaVac2;
    private javax.swing.JLabel jlLoteVacuna;
    private javax.swing.JLabel jlLugarVacunacion;
    private javax.swing.JLabel jlMarcaVacuna;
    private javax.swing.JLabel jlNumeroDosis;
    private javax.swing.JLabel jlTittle;
    private javax.swing.JLabel jlTittle1;
    private javax.swing.JTextField jtfDNI;
    private javax.swing.JTextField jtfFechaVac;
    private javax.swing.JTextField jtfLoteVacuna;
    private javax.swing.JTextField jtfMarcaVacuna;
    private javax.swing.JTextField jtfSearchDni;
    private javax.swing.JTextField jtfSearchName;
    // End of variables declaration//GEN-END:variables
}
